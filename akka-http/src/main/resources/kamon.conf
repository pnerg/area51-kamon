#------------------------------------------------------------------------
#
# This part overrides settings from the kamon-core library
# https://github.com/kamon-io/Kamon/blob/master/kamon-core/src/main/resources/reference.conf
#
#------------------------------------------------------------------------
kamon {

  environment {

    # Identifier for this service.
    service = "area51-app"
    service = ${?SERVICE_NAME}

    # Identifier for the host where this service is running. If set to `auto` Kamon will resolve the hostname using
    # the resolved name for localhost.
    host = "auto"

    # Identifier for a particular instance of this service. If set to `auto` Kamon will use the pattern service@host.
    instance = "auto"
  }

  # Modules that can be automatically discovered and started by Kamon. The configuration for each module has the
  # following schema:
  #
  # kamon.modules {
  #   module-path {
  #     enabled = true
  #     name = "The Module Name"
  #     description = "A module description"
  #     factory = "com.example.ModuleFactory"
  #   }
  # }
  #
  # All available modules in the classpath are started when calling Kamon.loadModules() and stopped when calling
  # Kamon.stopModules(). When starting modules available on the classpath, Kamon will instantiate the configurated
  # "factory" (must be an implementation of kamon.module.ModuleFactory) using a parameter-less constructor and passing
  # in the configuration instance under the specified "configuration-path".
  #
  modules {
    print-metric-reporter {
      enabled = false
      name = "PrintMetricReporterFactory"
      description = "Just prints all metrics"
      factory = "org.dmonix.area51.kamon.PrintMetricReporterFactory"
    }
    print-span-reporter {
      enabled = true
      name = "PrintSpanReporterFactory"
      description = "Just prints all spans"
      factory = "org.dmonix.area51.kamon.PrintSpanReporterFactory"
    }
    # disable the status-page plugin
    # https://github.com/kamon-io/Kamon/blob/master/kamon-status-page/src/main/resources/reference.conf
    status-page.enabled = false

    # disable the host/process metrics. Makes no sense in containers
    # https://github.com/kamon-io/kamon-system-metrics/blob/master/src/main/resources/reference.conf
    host-metrics.enabled = false
    process-metrics.enabled = false
  }

  metric {
    # Interval at which metric snapshots will be collected and sent to all metric reporters.
    tick-interval = 10 seconds
  }

  trace {
    # Interval at which sampled finished spans will be flushed to SpanReporters.
    tick-interval = 5 seconds


    # Decide whether a new, locally created Span should have the same Span Identifier as it's remote parent (if any) or
    # get a new local identifier. Certain tracing systems use the same Span Identifier to represent both sides (client
    # and server) of a RPC call, if you are reporting data to such systems then this option should be enabled. This
    # option only affects spans with the tag "span.kind=server".
    #
    # If you are using Zipkin, keep this option enabled. If you are using Jaeger, disable it.
    join-remote-parents-with-same-span-id = yes

    # Configures what Scheme will be used for trace and span identifiers. The possible values are:
    #   single: Uses 8-byte identifiers for both traces and spans.
    #   double: Uses 16-byte identifiers for traces and 8-byte identifiers for spans.
    #     fqcn: You can use your own identifier scheme by providing its fully qualified class name in this setting. If
    #           a fqcn is provided please make sure that the provided class has a parameter-less constructor and take
    #           into account that even though tracing might be working perfectly, you should confirm whether your custom
    #           scheme will work fine with the SpanReporters that you plan to use.
    identifier-scheme = single

    # Decides whether to include the stack trace of a Throwable as the "error.stacktrace" Span tag when a Span is marked
    # as failed.
    include-error-stacktrace = yes

    # Configure a custom sampler that filters certain URI's/paths
    #sampler = "org.dmonix.area51.kamon.CustomSampler"

    # The random sampler uses the "chance" setting and a random number to take a decision, if the random number is
    # on the upper (chance * 100) percent of the number spectrum the trace will be sampled. E.g. a chance of 0.01 will
    # hint that 1% of all traces should be reported.
    random-sampler {
      # Probability of a span being sampled. Must be a value between 0 and 1.
      probability = 1
    }

    # Settings that influence the tags applied to the "span.processing-time" metric for all finished spans with metric
    # tracking enabled.
    #
    span-metric-tags {
      # When this option is enabled the metrics collected for Spans will automatically add a tag named "upstream.name"
      # to all Server and Consumer operation Spans with the name of the service that generated their parent Span, if
      # available. Kamon propagates the "upstream.name" tag by default on all propagation channels.
      upstream-service = yes

      # When this option is enabled the metrics collected for Spans will automatically add a tag named "parentOperation"
      # with the name of the operation on the parent Span, if any.
      parent-operation = yes
    }
  }  

  propagation {

    http {

      # Default HTTP propagation. Unless specified otherwise, all instrumentation will use the configuration on
      # this section for HTTP context propagation.
      #
      default {

        # Configures how context tags will be propagated over HTTP headers.
        #
        tags {

          # Header name used to encode context tags.
          header-name = "context-tags"

          # Enables automatic inclusion of the "upstream.name" tag in outgoing requests.
          include-upstream-name = yes
        }

      }
    }
  }
}

#------------------------------------------------------------------------
#
# This part overrides settings from the kamon-prometheus library
# https://github.com/kamon-io/kamon-prometheus/blob/master/src/main/resources/reference.conf
#
#------------------------------------------------------------------------
kamon.prometheus.embedded-server {
  # port used by the embedded web server to publish the scraping endpoint.
  port = 9095
  port = ${?PROMETHEUS_PORT}
}

#------------------------------------------------------------------------
#
# This part overrides settings from the kamon-zipkin library
# https://github.com/kamon-io/kamon-zipkin/blob/master/src/main/resources/reference.conf
#
#------------------------------------------------------------------------
kamon.zipkin {
  #configures the end-point to report zipkin spans to
  host = "zipkin.service.consul"
  host = ${?ZIPKIN_HOST}
  port = 9411
  port = ${?ZIPKIN_PORT}
}


